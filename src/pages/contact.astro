---
import Layout from "@/layouts/Layout.astro";
import Menu from "@/components/Menu.astro";
import ResponseForm from "@/components/ResponseForm.astro";
import { useTranslations } from "@/i18n/utils";
import { languages } from "@/i18n/ui";
import Picture from "astro/components/Picture.astro";

const relativeLocale = Astro.currentLocale || "en";
const t = useTranslations(relativeLocale as keyof typeof languages);

const title = t("SEO.contact.title");
const description = t("SEO.contact.description");
---

<Layout title={title} description={description}>
  <Menu isFloating isWhite />
  <div class="h-[1281px] w-full flex justify-center items-center">
    <div class="absolute w-[75%] max-w-3xl flex justify-center items-center">
      <form class="px-8 pt-4 pb-16 bg-secondary-200 rounded-xl w-full">
        <h3 class="font-serif italic text-5xl text-center my-10">
          {t("contact.title")}
        </h3>
        <p class="w-auto md:w-[70%] text-sm text-center md:mx-auto">
          {t("contact.description")}
        </p>

        <div class="flex justify-around items-center gap-6 w-full">
          <div class="w-full mt-6 mb-4">
            <label for="contact-Name"
              >{t("contact.form.name")} <span class="text-red-500">*</span>
            </label>
            <input
              class="w-full bg-secondary-200 border-b border-black py-2 font-sans"
              id="contact-Name"
              required
              name="Name"
              placeholder={t("contact.form.your.name")}
            />
          </div>
        </div>

        <div class="w-full mb-4">
          <label for="contact-email"
            >{t("contact.form.email")} <span class="text-red-700">*</span>
          </label>
          <input
            class="w-full bg-secondary-200 border-b border-black py-2 font-sans"
            type="email"
            id="contact-email"
            required
            name="Email"
            placeholder={t("contact.form.your.email")}
          />
        </div>

        <div class="w-full mb-1">
          <label for="contact-Phone">{t("contact.form.phone")}</label>
        </div>
        <input
          class="w-full bg-secondary-200 border-b border-black py-2 font-sans"
          type="number"
          id="contact-Phone"
          name="Phone"
          placeholder={t("contact.form.your.phone")}
        />

        <div class="w-full mt-4">
          <label for="contact-Message"
            >{t("contact.form.massage")} <span class="text-red-700">*</span>
          </label>
          <input
            class="w-full bg-secondary-200 border-b border-black py-2 font-sans"
            id="contact-Messagel"
            required
            name="Message"
            placeholder={t("contact.form.your.massage")}
          />
        </div>

        <div class="text-center mt-10 gap-6">
          <button
            type="submit"
            class="px-36 py-4 bg-primary-700 rounded-full text-white"
            >{t("contact.form.botton")}</button
          >

          <p class="w-auto md:w-[415px] text-center text-xs mx-auto my-6">
            {t("contact.form.description")}
          </p>
        </div>
      </form>
    </div>
    <Picture
      width={1280}
      height={1081}
      src="/images/bg/bg-contact.webp"
      formats={["avif", "webp", "jpeg"]}
      alt="background home image"
      style={{
        objectFit: "cover",
        objectPosition: "bottom",
        width: "100%",
        height: "100%",
      }}
      pictureAttributes={{
        class: "w-full h-full",
      }}
    />
  </div>

  <ResponseForm
    msgSuccess="Your message has been received-expect a prompt and personalized response. Letâ€™s make your real estate journey effortless and rewarding"
    msgError="We are experiencing problems at this time. Please try again later."
  />
</Layout>

<script>
  import { actions } from "astro:actions";

  const form = document.querySelector("form") as HTMLFormElement,
    dialogForm = document.getElementById("dialogForm") as HTMLDialogElement,
    dialogFormError = document.getElementById(
      "dialogFormError"
    ) as HTMLDialogElement;

  form?.addEventListener("submit", async (event) => {
    event.preventDefault();
    const formData = new FormData(form);

    const { error } = await actions.emails.sendEmailContact(formData);

    if (error) {
      dialogFormError.showModal();
      return;
    }

    form?.reset();
    dialogForm.showModal();
  });
</script>
